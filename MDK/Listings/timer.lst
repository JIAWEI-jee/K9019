C51 COMPILER V9.56.0.0   TIMER                                                             01/20/2021 11:03:33 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN .\output\timer.obj
COMPILER INVOKED BY: C:\program_list\keil\C51\BIN\C51.EXE ..\HAEDWARE\Timer\timer.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDI
                    -R(..\source;..\HAEDWARE\Flash;..\HAEDWARE\DELAY;..\HAEDWARE\HT1621B;..\HAEDWARE\Uart;..\HAEDWARE\Key;..\HAEDWARE\Timer;.
                    -.\HAEDWARE\Pwm;..\HAEDWARE\ADC;..\HAEDWARE\WDT;..\HAEDWARE\product) DEBUG OBJECTEXTEND PRINT(.\Listings\timer.lst) OBJEC
                    -T(.\output\timer.obj)

line level    source

   1          #include "timer.h"
   2          #include "flash.h"
   3          #include "uart.h"
   4          #include "lcd_display.h"
   5          #include "key.h"
   6          /*----------------time---------------*/
   7          u8 time_cnt = 0;
   8          u16 time_sec = 0;
   9          u16 cnt_heat_time = 0;
  10          u8 over_rang_time_std = 0;
  11          u8 Gap_protect_std = 0 ;
  12          u8 On_stay = 0;
  13          u8  Open_Heat_Value = 0;
  14          u8 Heat_start_std = 0;
  15          u16 time_heat = 0;
  16          u16 temp_time = 0 ;
  17          u16 correct_time = 0;
  18          u8 one_heat = 0;
  19          u16 exti_cail_cnt = 0;
  20          u16 led_time_cnt = 0;
  21          u8   LED_std = 0;
  22          /**************************************/
  23          void led_set_on(void)
  24          {
  25   1         LED_std = 1;
  26   1        led_time_cnt = 0;
  27   1      }
  28          void led_set_off(void)
  29          {
  30   1        LED_std = 0;
  31   1        led_time_cnt = 0;
  32   1      }
  33          
  34          static void led_time(void)
  35          {
  36   1        if(LED_std == 1)
  37   1              {
  38   2                      ac_out = 1;
  39   2                if (++led_time_cnt > 300)
  40   2                      {
  41   3                        ac_out = 0;
  42   3                              LED_std = 0;
  43   3                              led_time_cnt = 0;
  44   3                      }
  45   2              
  46   2              }
  47   1      else
  48   1      {
  49   2       ac_out = 0;
  50   2      }
  51   1      
  52   1      }
C51 COMPILER V9.56.0.0   TIMER                                                             01/20/2021 11:03:33 PAGE 2   

  53          
  54          
  55          
  56          void set_time_sec_val ( u16 sec )
  57          {
  58   1              time_sec = sec;
  59   1              time_cnt = 0;
  60   1      //      gm_printf ( "set time second:%d\r\n",sec );
  61   1      }
  62          void set_correct_time(u8 gap)
  63          {
  64   1        
  65   1      switch ( gap )
  66   1              {
  67   2                      case GAP_WARM:
  68   2                              correct_time = corrected_time_warm_temp;
  69   2                              break;
  70   2                      case GAP_1:
  71   2                              correct_time = corrected_time_GAP_1_temp;
  72   2                              break;
  73   2                      case GAP_2:
  74   2                              correct_time = corrected_time_GAP_2_temp;
  75   2                              break;
  76   2                      case GAP_3:
  77   2                              correct_time = corrected_time_GAP_3_temp;
  78   2                              break;
  79   2                      case GAP_4:
  80   2                              correct_time = corrected_time_GAP_4_temp;
  81   2                              break;
  82   2                      case GAP_5:
  83   2                              correct_time = corrected_time_GAP_5_temp;
  84   2                              break;
  85   2                      case GAP_6:
  86   2                              correct_time = corrected_time_GAP_6_temp;
  87   2                              break;
  88   2                      case GAP_7:
  89   2                              correct_time = corrected_time_GAP_7_temp;
  90   2                              break;
  91   2                      case GAP_8:
  92   2                              correct_time = corrected_time_GAP_8_temp;
  93   2                              break;
  94   2                      case GAP_9:
  95   2                              correct_time = corrected_time_GAP_9_temp;
  96   2                              break;
  97   2      
  98   2      }
  99   1              }
 100           static void set_correct_Value ( void )
 101          {
 102   1              switch ( flash_info.gap )
 103   1              {
 104   2                      case GAP_WARM:
 105   2                              Open_Heat_Value = corrected_value_warm_temp;
 106   2                              break;
 107   2                      case GAP_1:
 108   2                              Open_Heat_Value = corrected_value_GAP_1_temp;
 109   2                              break;
 110   2                      case GAP_2:
 111   2                              Open_Heat_Value = corrected_value_GAP_2_temp;
 112   2                              break;
 113   2                      case GAP_3:
 114   2                              Open_Heat_Value = corrected_value_GAP_3_temp;
C51 COMPILER V9.56.0.0   TIMER                                                             01/20/2021 11:03:33 PAGE 3   

 115   2                              break;
 116   2                      case GAP_4:
 117   2                              Open_Heat_Value = corrected_value_GAP_4_temp;
 118   2                              break;
 119   2                      case GAP_5:
 120   2                              Open_Heat_Value = corrected_value_GAP_5_temp;
 121   2                              break;
 122   2                      case GAP_6:
 123   2                              Open_Heat_Value = corrected_value_GAP_6_temp;
 124   2                              break;
 125   2                      case GAP_7:
 126   2                              Open_Heat_Value = corrected_value_GAP_7_temp;
 127   2                              break;
 128   2                      case GAP_8:
 129   2                              Open_Heat_Value = corrected_value_GAP_8_temp;
 130   2                              break;
 131   2                      case GAP_9:
 132   2                              Open_Heat_Value = corrected_value_GAP_9_temp;
 133   2                              break;
 134   2      
 135   2      
 136   2              }
 137   1      
 138   1      }
 139          static void set_heat_val ( void )
 140          {
 141   1              if ( Heat_start_std == 2)
 142   1              {
 143   2      
 144   2                  
 145   2                      if ( ++time_heat > correct_time )
 146   2                      {
 147   3                              KEY_printf ( "exchange_heat_value \r\n" );
 148   3                              Heat_start_std = 0;
 149   3                              time_heat = 0;
 150   3                              one_heat = 0;
 151   3      
 152   3                              set_correct_Value (  );
 153   3                      }
 154   2              }
 155   1      //      if (Heat_start_std == 2)
 156   1      //              {
 157   1      //                 one_heat = 1;
 158   1      //           if ( ++time_heat > Heat_Value)
 159   1      //              {
 160   1      //                 one_heat = 0;
 161   1      //              Heat_start_std = 1;
 162   1      //                  }
 163   1      //      
 164   1      //          }
 165   1      }
 166          
 167          void set_time_sec ( void )
 168          {
 169   1              time_cnt = 0;
 170   1              if ( flash_info.timer == TIMER_ON )
 171   1              {
 172   2                      time_sec = 0;
 173   2                      cnt_heat_time = 0;
 174   2                      temp_time = 0;
 175   2              }
 176   1              else if ( flash_info.timer == TIMER_0_5H )
C51 COMPILER V9.56.0.0   TIMER                                                             01/20/2021 11:03:33 PAGE 4   

 177   1              {
 178   2                      time_sec = 30*60;
 179   2                      cnt_heat_time = 0;
 180   2                      temp_time = 0;
 181   2              }
 182   1              else if ( flash_info.timer == TIMER_1H )
 183   1              {
 184   2                      time_sec = 60*60;
 185   2                      cnt_heat_time = 0;
 186   2                      temp_time = 0;
 187   2              }
 188   1              else if ( flash_info.timer == TIMER_2H )
 189   1              {
 190   2                      time_sec = 2*60*60;
 191   2                      cnt_heat_time = 0;
 192   2                      temp_time = 0;
 193   2              }
 194   1              else if ( flash_info.timer == TIMER_4H )
 195   1              {
 196   2                      time_sec = 4*60*60;
 197   2                      cnt_heat_time = 0;
 198   2                      temp_time = 0;
 199   2              }
 200   1              else if ( flash_info.timer == TIMER_8H )
 201   1              {
 202   2                      time_sec = 8*60*60;
 203   2                      cnt_heat_time = 0;
 204   2                      temp_time = 0;
 205   2              }
 206   1      //      gm_printf ( "time second:%d \r\n",time_sec );
 207   1      }
 208          
 209          
 210          void time0_init ( void )
 211          {
 212   1              /**********************************TIM0≈‰÷√≥ı ºªØ**************************************/
 213   1              TCON1 = 0x00;                                           //Tx0∂® ±∆˜ ±÷”Œ™Fosc/12
 214   1              TMOD = 0x00;                                            //16Œª÷ÿ◊∞‘ÿ∂® ±∆˜/º∆ ˝∆˜
 215   1              //∂® ±10ms
 216   1              //∑¥Õ∆≥ı÷µ      = 65536 - ((10/1000) / (1/(Fosc / Timer∑÷∆µœµ ˝)))
 217   1              //                      = 65536 - ((10/1000) / (1/(16000000 / 12)))
 218   1              //                      = 65536 - 13333
 219   1              //                      = 0xCBEC
 220   1              // TH0 = 0xCB;
 221   1              // TL0 = 0xEB;                                                  //T0∂® ± ±º‰10ms  16MHZ
 222   1              TH0 = 0xF2;
 223   1              TL0 = 0xFB;                                                     //T0∂® ± ±º‰10ms  4MHZ
 224   1              TF0 = 0;//«Â≥˝÷–∂œ±Í÷æ
 225   1              ET0 = 1;//¥Úø™T0÷–∂œ
 226   1              TR0 = 1;// πƒ‹T0
 227   1              EA = 1;                                                         //¥Úø™◊‹÷–∂œ
 228   1      }
 229          
 230          
 231          
 232          //10ms
 233          void TIMER0_Rpt ( void ) interrupt TIMER0_VECTOR
 234          {
 235   1          led_time();
 236   1              if ( get_device_state() == ON ) //flash_info.timer != TIMER_ON &&
 237   1              {
 238   2                      time_cnt++;
C51 COMPILER V9.56.0.0   TIMER                                                             01/20/2021 11:03:33 PAGE 5   

 239   2                      if ( time_cnt >= 100 )
 240   2                      {
 241   3                              set_heat_val();
 242   3      
 243   3                              if ( On_stay == 2 )  // stay on ƒ£ Ωœ¬Ω¯––±£ª§
 244   3                              {
 245   4                                      cnt_heat_time++;
 246   4                                      if ( cnt_heat_time > overrang_time )
 247   4                                      {
 248   5                                              On_stay = 0;
 249   5                                              cnt_heat_time = 0;
 250   5                                              over_rang_time_std = 1;
 251   5                                              //gm_printf ( "On_stay_overrang \r\n" );
 252   5                                      }
 253   4      
 254   4                              }
 255   3                              if ( time_sec > 0 )
 256   3                              {
 257   4      
 258   4                                      time_sec--;
 259   4                                      if ( Gap_protect_std == 2 )
 260   4                                      {
 261   5      
 262   5                                              cnt_heat_time++;
 263   5      
 264   5      
 265   5                                              if ( cnt_heat_time > overrang_time )
 266   5                                              {
 267   6                                                      over_rang_time_std = 1;
 268   6                                                      Gap_protect_std = 0;
 269   6                                                      cnt_heat_time = 0;
 270   6                                                      gm_printf ( "protect \r\n" );
 271   6                                              }
 272   5                                      }
 273   4                              }
 274   3                              else
 275   3                              {
 276   4                                      if ( flash_info.timer != TIMER_ON )
 277   4                                      {
 278   5                                              set_device_state ( OFF );
 279   5                                              time_sec = 0;
 280   5                                              cnt_heat_time = 0;
 281   5                                              Gap_protect_std = 0;
 282   5                                              On_stay = 0;
 283   5                                              ht1621_all_clear(); //∂® ± ±º‰µΩ
 284   5                                              gm_printf ( "time off \r\n" );
 285   5                                      }
 286   4                              }
 287   3                              //gm_printf("time_sec=%d \r\n",time_sec);
 288   3                              time_cnt = 0;
 289   3                      }
 290   2              }
 291   1              
 292   1              else if (calibration_std == 1)
 293   1              {
 294   2                if(++exti_cail_cnt > cali_time)
 295   2                      {
 296   3                        calibration_std = 0;
 297   3                        exti_cail_cnt = 0;
 298   3                      }
 299   2              }
 300   1      }
C51 COMPILER V9.56.0.0   TIMER                                                             01/20/2021 11:03:33 PAGE 6   

 301          
 302          void time_Print ( void )
 303          {
 304   1              switch ( ++temp_time )
 305   1              {
 306   2                      case H_0_5:
 307   2                              gm_printf ( "time_to_0.5H  time_sec=%d \r\n",time_sec );
 308   2                              temp_time = 0;
 309   2                              break;
 310   2                      case H_1_0:
 311   2                              gm_printf ( "time_to_1H  time_sec=%d \r\n",time_sec );
 312   2                              temp_time = 0;
 313   2                              break;
 314   2                      case H_2_0:
 315   2                              gm_printf ( "time_to_2H  time_sec=%d \r\n",time_sec );
 316   2                              temp_time = 0;
 317   2                              break;
 318   2                      case H_4_0:
 319   2                              gm_printf ( "time_to_4H  time_sec=%d \r\n",time_sec );
 320   2                              temp_time = 0;
 321   2                              break;
 322   2                      case H_8_0:
 323   2                              gm_printf ( "time_to_8H  time_sec=%d \r\n",time_sec );
 324   2                              temp_time = 0;
 325   2                              break;
 326   2              }
 327   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    916    ----
   CONSTANT SIZE    =    183    ----
   XDATA SIZE       =     22    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
