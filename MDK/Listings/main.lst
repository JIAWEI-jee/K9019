C51 COMPILER V9.56.0.0   MAIN                                                              01/20/2021 11:03:32 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\output\main.obj
COMPILER INVOKED BY: C:\program_list\keil\C51\BIN\C51.EXE ..\source\main.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\sour
                    -ce;..\HAEDWARE\Flash;..\HAEDWARE\DELAY;..\HAEDWARE\HT1621B;..\HAEDWARE\Uart;..\HAEDWARE\Key;..\HAEDWARE\Timer;..\HAEDWAR
                    -E\Pwm;..\HAEDWARE\ADC;..\HAEDWARE\WDT;..\HAEDWARE\product) DEBUG OBJECTEXTEND PRINT(.\Listings\main.lst) OBJECT(.\output
                    -\main.obj)

line level    source

   1          #define ALLOCATE_EXTERN
   2          #include "HC89F303.h"
   3          #include "intrins.h"//nop
   4          #include "uart.h"
   5          #include "delay.h"
   6          #include "key.h"
   7          #include "flash.h"
   8          #include "timer.h"
   9          #include "pwm.h"
  10          #include "lcd_display.h"
  11          #include "adc.h"
  12          #include "wdt.h"
  13          #include "product.h"
  14          
  15          #define SKU 9019
  16          #define SOFT_VER "1.10.00"
  17          
  18          u16 adc_cnt = 0;
  19          u8  first_heat_std = 0,fault_std = 0,Res_std = 0;
  20          
  21          void Set_Temp ( u16 temp );
  22          void Controll_Heat ( u16 temp_set,u16 temp_now );
  23          void Protect ( void );
  24          void Error ( void );
  25          void Res_test ( void );
  26          void device_init ( void )
  27          {
  28   1              /************************************系统初始化****************************************/
  29   1              // CLKSWR = 0x51;                                               //选择内部高频RC为系统时钟，内部高频RC 2分频，Fosc=16MHz
  30   1              CLKSWR = 0x53;  //8分频 32/8 = 4M
  31   1              CLKDIV = 0x01;                                          //Fosc 1分频得到Fcpu，Fcpu=16MHz
  32   1              P0M2 = 0x10;                                            //P02设置为非施密特数字输入
  33   1      }
  34          
  35          
  36          static void key_handle ( void )
  37          {
  38   1              u8 key_val = 0;
  39   1              if ( fault_std == 0 )
  40   1              {
  41   2                      key_val = key_scan();
  42   2              }
  43   1              else
  44   1              {
  45   2                      key_val = 0;
  46   2              }
  47   1              if ( ( key_val == LED_STAY_ON ) && ( calibration_std == 0 ) )
  48   1              {
  49   2                        KEY_printf ( " key_scan\r\n" );
  50   2      
  51   2                      if ( get_device_state() == ON )
  52   2                      {
C51 COMPILER V9.56.0.0   MAIN                                                              01/20/2021 11:03:32 PAGE 2   

  53   3      
  54   3                              set_device_state ( OFF );
  55   3                              ht1621_all_clear();
  56   3                              set_pwm ( 0 );
  57   3                              led_set_off();
  58   3                      }
  59   2                      else
  60   2                      {
  61   3                              led_set_on();
  62   3                              set_device_state ( ON );
  63   3                              set_time_sec();
  64   3                              if ( flash_info.gap > GAP_3 )
  65   3                              {
  66   4                                      if ( flash_info.timer == TIMER_ON )
  67   4                                      {
  68   5                                              On_stay = 2;
  69   5                                      }
  70   4                                      else if ( flash_info.timer > TIMER_2H )
  71   4                                      {
  72   5                                              Gap_protect_std = 2;
  73   5                                      }
  74   4                              }
  75   3                              first_heat_std = 1;
  76   3                              set_correct_time ( flash_info.gap );
  77   3                              lcd_display_gap ( flash_info.gap );
  78   3                              lcd_display_time ( flash_info.timer );
  79   3      
  80   3                      }
  81   2              }
  82   1              else if ( get_device_state() == ON )
  83   1              {
  84   2      
  85   2      
  86   2      
  87   2                      if ( key_val == KEY_2_PRES )
  88   2                      {
  89   3                              led_set_on();
  90   3      //                      KEY_printf ( " KEY_2_PRES\r\n" );
  91   3                              if ( flash_info.gap < GAP_9 )
  92   3                              {
  93   4                                      flash_info.gap++;
  94   4      
  95   4                              }
  96   3                              else
  97   3                              {
  98   4                                      flash_info.gap = GAP_1;
  99   4                              }
 100   3                              if ( flash_info.gap > GAP_3 )
 101   3                              {
 102   4                                      if ( flash_info.timer == TIMER_ON )
 103   4                                      {
 104   5                                              On_stay = 2;
 105   5                                      }
 106   4                                      else if ( flash_info.timer > TIMER_2H )
 107   4                                      {
 108   5                                              Gap_protect_std = 2;
 109   5                                      }
 110   4                              }
 111   3      
 112   3                              first_heat_std = 1;
 113   3                              set_correct_time ( flash_info.gap );
 114   3                              lcd_display_gap ( flash_info.gap );
C51 COMPILER V9.56.0.0   MAIN                                                              01/20/2021 11:03:32 PAGE 3   

 115   3                              //set_time_sec();
 116   3                              flah_save_data();
 117   3                      }
 118   2                      else if ( key_val == KEY_3_PRES ) //定时
 119   2                      {
 120   3                              led_set_on();
 121   3                              if ( flash_info.timer < 0x05 )
 122   3                              {
 123   4                                      flash_info.timer++;
 124   4                              }
 125   3                              else
 126   3                              {
 127   4                                      flash_info.timer = TIMER_ON;
 128   4                              }
 129   3                              if ( flash_info.gap > GAP_3 )
 130   3                              {
 131   4                                      if ( flash_info.timer == TIMER_ON )
 132   4                                      {
 133   5                                              On_stay = 2;
 134   5                                      }
 135   4                                      else if ( flash_info.timer > TIMER_2H )
 136   4                                      {
 137   5                                              Gap_protect_std = 2;
 138   5                                      }
 139   4                              }
 140   3                              //KEY_printf ( "timer:%d \r\n", ( u16 ) flash_info.timer );
 141   3                              lcd_display_time ( flash_info.timer );
 142   3                              set_time_sec();
 143   3                              flah_save_data();
 144   3                      }
 145   2              }
 146   1      }
 147          
 148          
 149          u16 calibration_temperature ( u16 temper )
 150          {
 151   1              u8 temp1 = 0;
 152   1              if ( ( usart_rx_flag == 2 ) && ( calibration_std == 1 ) )
 153   1              {
 154   2                      temp1 = ( u8 ) temper;
 155   2                      usart_rx_flag = 0;
 156   2                      flash_info.correct_std = 1;
 157   2      
 158   2                      if ( temper_val > 15 )
 159   2                      {
 160   3                              if ( temper_val > temp1 )
 161   3                              {
 162   4                                      flash_info.correct_value = temper_val - temp1;
 163   4                                      flash_info.correct_sign = 1; //为正公差
 164   4                              }
 165   3                              else
 166   3                              {
 167   4                                      flash_info.correct_value = temp1 - temper_val;
 168   4      
 169   4                                      hal_uart_putchar ( flash_info.correct_value );
 170   4                                      flash_info.correct_sign = 2; //为负公差
 171   4                              }
 172   3                              if ( ( flash_info.correct_value < 2 ) || ( flash_info.correct_value > 20 ) )
 173   3                              {
 174   4                                      flash_info.correct_value = 0;
 175   4                                      flash_info.correct_sign = 0;
 176   4                              }
C51 COMPILER V9.56.0.0   MAIN                                                              01/20/2021 11:03:32 PAGE 4   

 177   3                              flah_save_data();
 178   3                              producte_send_cmd ( 0x02, 0x02 );
 179   3                      }
 180   2              }
 181   1              if ( flash_info.correct_sign == 1 )
 182   1              {
 183   2                      return ( ( u16 ) ( temper = temper + flash_info.correct_value ) );
 184   2              }
 185   1              else if ( flash_info.correct_sign == 2 )
 186   1              {
 187   2                      return ( ( u16 ) ( temper = temper - flash_info.correct_value ) );
 188   2              }
 189   1              return ( ( u16 ) temper );
 190   1      
 191   1      }
 192          
 193          
 194          
 195          u16 temp_calc ( u16 uR510,u16 uRw )
 196          {
 197   1              u8 i = 0;
 198   1              u8 basi_tmp = 50;
 199   1              u8 k = 10;
 200   1              float u1 = 0;
 201   1      
 202   1              if ( ( uR510 < 50 ) || ( uR510 > uRw ) )
 203   1              {
 204   2                      return 0xff;
 205   2              }
 206   1      
 207   1      
 208   1              u1 = (  ( ( float ) uRw /1000 ) - ( ( float ) uR510/1000 ) ) / ( ( ( float ) uR510/1000 ) /510 );
 209   1              if ( u1 < 0 )
 210   1              {
 211   2                      return 0xff;
 212   2              }
 213   1              gm_printf ( "R = %f  \r\n",u1 );
 214   1              u1 = u1 / Length;
 215   1      
 216   1              if ( u1 < 70 )
 217   1              {
 218   2                      return 101;
 219   2              }
 220   1              // gm_printf("average R = %f \r\n",u1);
 221   1              u1 = u1 / Temperature_Value;
 222   1              //gm_printf("cmp = %f \r\n",u1);
 223   1              if ( u1*Temperature_Value > Temperature_Value )
 224   1              {
 225   2                      while ( 1 )
 226   2                      {
 227   3                              u1 = u1 / ( 1 + 0.0048 );
 228   3                              i++;
 229   3                              if ( u1 <= 1 )
 230   3                              {
 231   4                                      break;
 232   4                              }
 233   3      
 234   3                      }
 235   2                      // gm_printf("basi_tmp_u1 = %d \r\n",basi_tmp);
 236   2                      basi_tmp = basi_tmp + i;
 237   2                      //gm_printf("basi_tmp_u1f = %d \r\n",basi_tmp);
 238   2              }
C51 COMPILER V9.56.0.0   MAIN                                                              01/20/2021 11:03:32 PAGE 5   

 239   1              else
 240   1              {
 241   2                      while ( 1 )
 242   2                      {
 243   3                              u1 = u1 / ( 1 - 0.0048 );
 244   3                              i++;
 245   3                              if ( u1 >= 1 )
 246   3                              {
 247   4                                      break;
 248   4                              }
 249   3      
 250   3      
 251   3                      }
 252   2                      // gm_printf("i = %d \r\n",i);
 253   2                      basi_tmp = basi_tmp - i;
 254   2              }
 255   1              //gm_printf("basi_tmpF:%d \r\n",basi_tmp);
 256   1              if ( Res_std == 1 )
 257   1              {
 258   2                      return 0xfe;
 259   2              }
 260   1              else
 261   1              {
 262   2                      return ( basi_tmp );
 263   2              }
 264   1      }
 265          
 266          
 267          
 268          void temperature_handle ( void )
 269          {
 270   1              u16 temp = 0;
 271   1              u16 adc_val1 = 0,adc_val3 = 0;
 272   1              static u8 error_std = 0;
 273   1              adc_cnt++;
 274   1      
 275   1              if ( adc_cnt > 10000 )
 276   1              {
 277   2                      adc_cnt = 0;
 278   2                      get_voltage ( &adc_val1,&adc_val3 );
 279   2      
 280   2                      //      KEY_printf ( "adv1 = %d adv3 =%d \r\n",adc_val1,adc_val3 );  //pjw set
 281   2                      temp = temp_calc ( adc_val1, adc_val3 );
 282   2      //                      KEY_printf ( "temp val:%d \r\n",temp );
 283   2                      temp =  calibration_temperature ( temp );
 284   2                      KEY_printf ( "%d \r\n",temp );
 285   2      
 286   2                      if ( ( adc_val1 >50 ) && ( Res_std == 0 ) )
 287   2                      {
 288   3                              if ( get_device_state() == ON )
 289   3                              {
 290   4                                      if ( first_heat_std == 1 )
 291   4                                      {
 292   5                                              first_heat_std = 0;
 293   5                                              if ( temp > 50 )
 294   5                                              {
 295   6                                                      Heat_start_std = 2;
 296   6                                                      Open_Heat_Value = corrected_value_GAP_6_temp;
 297   6                                              }
 298   5                                              else
 299   5                                              {
 300   6                                                      Heat_start_std = 2;
C51 COMPILER V9.56.0.0   MAIN                                                              01/20/2021 11:03:32 PAGE 6   

 301   6                                                      one_heat = 1;
 302   6                                                      Open_Heat_Value = corrected_value_warm_temp     ;
 303   6                                              }
 304   5                                      }
 305   4      
 306   4                                      lcd_display_time ( flash_info.timer );
 307   4                                      lcd_display_gap ( flash_info.gap );
 308   4                                      Set_Temp ( temp );
 309   4                              }
 310   3                              else
 311   3                              {
 312   4                                      if ( calibration_std == 1 )
 313   4                                      {
 314   5                                              set_pwm ( 0 );
 315   5                                              ht1621_all_clear();
 316   5                                              lcd_display_gap ( flash_info.gap );
 317   5                                              cali_display_std = 1;
 318   5                                      }
 319   4                                      else
 320   4                                      {
 321   5                                              set_pwm ( 0 );
 322   5                                              ht1621_send_cmd ( LCD_OFF );
 323   5                                              cali_display_std = 0;
 324   5                                      }
 325   4                              }
 326   3                              fault_std = 0;
 327   3                      }
 328   2                      else if ( Res_std == 0 )
 329   2                      {
 330   3                              calibration_std = 0;
 331   3                              cali_display_std = 0;
 332   3                              ht1621_all_clear();
 333   3                              set_pwm ( 0 );
 334   3                              error_std = Error_STD;
 335   3                              lcd_display_gap ( error_std );
 336   3                              fault_std = 1;
 337   3                      }
 338   2                      else if ( Res_std == 1 )
 339   2                      {
 340   3                              calibration_std = 0;
 341   3                              cali_display_std = 0;
 342   3                              ht1621_all_clear();
 343   3                              set_pwm ( 0 );
 344   3                              error_std = Error_Res_STD;
 345   3                              lcd_display_gap ( error_std );
 346   3                              fault_std = 1;
 347   3      
 348   3                      }
 349   2              }
 350   1      
 351   1      
 352   1      }
 353          
 354          
 355          
 356          
 357          void main ( void )
 358          {
 359   1              device_init();
 360   1      
 361   1              uart_init();
 362   1              adc_init();
C51 COMPILER V9.56.0.0   MAIN                                                              01/20/2021 11:03:32 PAGE 7   

 363   1              EA = 1;//开启总中断
 364   1              key_init();
 365   1              time0_init();
 366   1              flash_init();
 367   1              pwm_init ( 200 );
 368   1              led_set_on();
 369   1              init_lcd_ht1621b();
 370   1              delay_ms ( 800 );
 371   1              ht1621_all_clear(); //消除鬼影
 372   1              lcd_display_gap ( GAP_3 );
 373   1              //delay_ms ( 500 );
 374   1              wdt_init ( 2 );
 375   1              set_pwm ( 10 );
 376   1          product_check_process ();
 377   1           set_pwm ( 0 );
 378   1              gm_printf ( "\r\n==================================\r\n" );
 379   1              gm_printf ( "sku:K%d \r\n", ( u16 ) SKU );
 380   1              gm_printf ( "soft version:%s \r\n",SOFT_VER );
 381   1              gm_printf ( "gap %d \r\n", ( u16 ) flash_info.gap );      //挡位
 382   1              gm_printf ( "timer %d \r\n", ( u16 ) flash_info.timer );  // 时间长度
 383   1              gm_printf ( "==================================\r\n" );
 384   1      
 385   1              while ( 1 )
 386   1              {
 387   2      
 388   2                      key_handle();
 389   2                      temperature_handle();
 390   2                      Res_test();
 391   2                      clear_wdt();
 392   2      
 393   2              }
 394   1      }
 395          
 396          
 397          void Controll_Heat ( u16 temp_set,u16 temp_now )
 398          {
 399   1      //KEY_printf ( "temp_set val:%d \r\n",temp_set );
 400   1              if ( temp_now >  temp_set   )
 401   1              {
 402   2                      //      KEY_printf ( "close_heat \r\n");
 403   2      
 404   2                      set_pwm ( 0 ); // 关闭加热丝
 405   2              }
 406   1              else if ( temp_now < ( temp_set - Open_Heat_Value ) )
 407   1              {
 408   2                      //KEY_printf ( "open_heat \r\n");
 409   2                      set_pwm ( 10 ); //打开加热丝
 410   2              }
 411   1      }
 412          
 413          void Set_Temp ( u16 temp )
 414          {
 415   1              if ( one_heat == 1 )
 416   1              {
 417   2                      //KEY_printf ( "oneheat \r\n");
 418   2                      Controll_Heat ( One_Heat_Temp,temp );
 419   2              }
 420   1              else
 421   1              {
 422   2                      //      KEY_printf ( "twoheat \r\n");
 423   2                      switch ( flash_info.gap )
 424   2                      {
C51 COMPILER V9.56.0.0   MAIN                                                              01/20/2021 11:03:32 PAGE 8   

 425   3                              case GAP_WARM:
 426   3                                      Controll_Heat ( GAP_WARM_temp,temp );
 427   3                                      break;
 428   3                              case GAP_1:
 429   3                                      Controll_Heat ( GAP_1_temp,temp );
 430   3                                      break;
 431   3                              case GAP_2:
 432   3                                      Controll_Heat ( GAP_2_temp,temp );
 433   3                                      break;
 434   3                              case GAP_3:
 435   3                                      Controll_Heat ( GAP_3_temp,temp );
 436   3                                      break;
 437   3                              case GAP_4:
 438   3                                      Controll_Heat ( GAP_4_temp,temp );
 439   3                                      break;
 440   3                              case GAP_5:
 441   3                                      Controll_Heat ( GAP_5_temp,temp );
 442   3                                      break;
 443   3                              case GAP_6:
 444   3                                      Controll_Heat ( GAP_6_temp,temp );
 445   3                                      break;
 446   3                              case GAP_7:
 447   3                                      Controll_Heat ( GAP_7_temp,temp );
 448   3                                      break;
 449   3                              case GAP_8:
 450   3                                      Controll_Heat ( GAP_8_temp,temp );
 451   3                                      break;
 452   3                              case GAP_9:
 453   3                                      Controll_Heat ( GAP_9_temp,temp );
 454   3                                      break;
 455   3      
 456   3                      }
 457   2              }
 458   1      }
 459          
 460          
 461          
 462          
 463          void Protect ( void )
 464          {
 465   1              if ( over_rang_time_std == 1 )
 466   1              {
 467   2                      if ( flash_info.gap > GAP_3 )
 468   2                      {
 469   3                              flash_info.gap = GAP_3;
 470   3                              lcd_display_gap ( flash_info.gap );
 471   3                              flah_save_data();
 472   3                              over_rang_time_std = 0;
 473   3                      }
 474   2              }
 475   1      }
 476          
 477          
 478          void Res_test ( void )
 479          {
 480   1      
 481   1              if ( Res_IO == 1 )
 482   1              {
 483   2      
 484   2      #if _LED_BACK
 485   2                      Res_std = 1;
 486   2      #else
C51 COMPILER V9.56.0.0   MAIN                                                              01/20/2021 11:03:32 PAGE 9   

                              Res_std = 0;
              #endif
 489   2              }
 490   1      
 491   1      }
 492          
 493          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1910    ----
   CONSTANT SIZE    =    165    ----
   XDATA SIZE       =      6      26
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
